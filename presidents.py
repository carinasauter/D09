#!/usr/bin/env python3# Exercise: Presidents# Write a program to:# (1) Load the data from presidents.txt into a dictionary.# (2) Print the years the greatest and least number of presidents were alive.#     (between 1732 and 2016 (inclusive))#     Ex.#       'least = 2015'#       'John Doe'#       'most = 2015'#       'John Doe, Jane Doe, John Adams, and Jane Adams'# Bonus: Confirm there are no ties. If there is a tie print like so:#     Ex.#       'least = 1900, 2013-2015'#       'John Doe (1900)'#       'Jane Doe (2013-2015)'#       'most = 1900-1934, 2013'#       'John Doe, Jane Doe, John Adams, and Jane Adams (1900-1933)'#       'Sally Doe, Billy Doe, Mary Doe, and Cary Doe (1934)'#       'Alice Doe, Bob Doe, Zane Doe, and Yi Do (2013)'############################################################################### Imports# Bodydef get_dict_of_pres():    dictionary_of_presidents = {}    with open("presidents.txt", "r") as doc:        text = doc.readlines()        for line in text:            line = line.strip().split(",")            dictionary_of_presidents[line[0]] = (line[1], line[2])    return dictionary_of_presidentsdef earliest_year_of_birth(d):    min = 2016    for president in d:        if min > int(d[president][0]):            min = int(d[president][0])    return mindef new_dict_of_pres(d):    new_dict_of_pres = {}    for x in range(earliest_year_of_birth(get_dict_of_pres()), 2017):        number_of_presidents_alive = 0        alives = []        for president in d:            if x >= int(d[president][0]):                try:                    if x <= int((d[president][1])):                        number_of_presidents_alive += 1                        alives.append(president)                except:                    if (d[president][1]) == "None":                        number_of_presidents_alive += 1                        alives.append(president)        new_dict_of_pres[x] = (number_of_presidents_alive, alives)    print(new_dict_of_pres)    return new_dict_of_pres    #print ("{}: {} alive ".format(x, number_of_presidents_alive) + str(alives))##############################################################################def main():  # CALL YOUR FUNCTION BELOW    new_dict = new_dict_of_pres(get_dict_of_pres())    sorted(new_dict, key=)# no idea how to sort this by the first value of the tuple value pair in# the dictionary now :( ###if __name__ == '__main__':    main()